export interface FlexpaEOBSearchResponse {
    resourceType: string;
    type:         string;
    entry:        Entry[];
    link:         Link[];
}

export interface Entry {
    fullUrl:  string;
    resource: Resource;
}

export interface Resource {
    adjudication:   Adjudication[];
    billablePeriod: Period;
    careTeam:       CareTeam[];
    created:        Date;
    diagnosis:      Diagnosis[];
    disposition:    Disposition;
    facility:       Facility;
    id:             string;
    identifier:     Identifier[];
    insurance:      Insurance[];
    insurer:        Insurer;
    item:           Item[];
    meta:           Meta;
    outcome:        Outcome;
    patient:        Patient;
    payee:          Payee;
    payment:        Payment;
    procedure:      Procedure[];
    provider:       Insurer;
    resourceType:   ResourceType;
    status:         Status;
    subType:        SubType;
    supportingInfo: SupportingInfo[];
    total:          Total[];
    type:           Type;
    use:            Use;
}

export interface Adjudication {
    category: Category;
    reason:   Reason;
}

export interface Category {
    coding: Tag[];
}

export interface Tag {
    code:    string;
    system?: string;
}

export interface Reason {
    coding: ReasonCoding[];
}

export interface ReasonCoding {
    code:    Code;
    display: CodingDisplay;
}

export enum Code {
    Innetwork = "innetwork",
}

export enum CodingDisplay {
    InNetwork = "In Network",
}

export interface Period {
    end:   Date;
    start: Date;
}

export interface CareTeam {
    provider:    Insurer;
    responsible: boolean;
    role:        Type;
    sequence:    number;
}

export interface Insurer {
    display: InsurerDisplay;
}

export enum InsurerDisplay {
    AetnaOrItsAffiliatesCollectivelyAetna = "Aetna or its Affiliates (collectively, 'Aetna')",
    Unknown = "Unknown",
}

export interface Type {
    coding: TypeCoding[];
}

export interface TypeCoding {
    code:    string;
    display: string;
    system:  string;
}

export interface Diagnosis {
    diagnosisCodeableConcept: Category;
    onAdmission:              Type;
    sequence:                 number;
    type:                     Type[];
}

export enum Disposition {
    Approved = "Approved",
}

export interface Facility {
    display:   FacilityDisplay;
    reference: string;
}

export enum FacilityDisplay {
    AetnaOrItsAffiliatesCollectivelyAetna = "Aetna or its Affiliates (collectively, 'Aetna')",
    ConnecticutChildrensMedicalCenter = "CONNECTICUT CHILDRENS MEDICAL CENTER",
    HartfordHospital = "HARTFORD HOSPITAL",
}

export interface Identifier {
    type?:   Type;
    system?: string;
    value?:  string;
}

export interface Insurance {
    coverage: Facility;
    focal:    boolean;
}

export interface Item {
    adjudication:            Total[];
    locationCodeableConcept: Type;
    productOrService:        Type;
    quantity:                Quantity;
    revenue:                 Type;
    sequence:                number;
    servicedPeriod:          Period;
    net?:                    Amount;
    informationSequence?:    number[];
    diagnosisSequence?:      number[];
}

export interface Total {
    amount?:  Amount;
    category: Type;
}

export interface Amount {
    currency: Currency;
    value:    number;
}

export enum Currency {
    Usd = "USD",
}

export interface Quantity {
    value: number;
}

export interface Meta {
    lastUpdated: Date;
    profile:     string[];
    versionId:   string;
    source:      string;
    tag:         Tag[];
}

export enum Outcome {
    Complete = "complete",
}

export interface Patient {
    reference: Reference;
}

export enum Reference {
    PatientDff11Bbd9D99577089B69E4955C2C418 = "Patient/dff11bbd-9d99-5770-89b6-9e4955c2c418",
}

export interface Payee {
    party: Insurer;
    type:  Type;
}

export interface Payment {
    amount: Amount;
}

export interface Procedure {
    date:                     Date;
    procedureCodeableConcept: Category;
    sequence:                 number;
    type:                     Type[];
}

export enum ResourceType {
    ExplanationOfBenefit = "ExplanationOfBenefit",
}

export enum Status {
    Active = "active",
}

export interface SubType {
    coding: TypeCoding[];
    text:   Text;
}

export enum Text {
    Inpatient = "Inpatient",
}

export interface SupportingInfo {
    category:      Category;
    sequence:      number;
    timingPeriod?: Period;
    timingDate?:   Date;
}

export enum Use {
    Claim = "claim",
}

export interface Link {
    relation: string;
    url:      string;
}
